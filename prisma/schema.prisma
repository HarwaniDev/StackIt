// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file for StackIt Interview Experience Platform
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

enum UserRole {
  GUEST
  USER
  ADMIN
}

enum NotificationType {
  POST_CREATED   // when user creates a post
  COMMENT_RECEIVED    // when a comment has been posted on user's post
}

model User {
  id        String   @id
  name      String?
  email     String   @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // StackIt specific fields
  role UserRole @default(USER)
  bio  String?

  // StackIt relations
  posts        Post[]
  comments     Comment[]
  votes        Vote[]
  notifications Notification[]

  // Self-referential relations for mentions
  mentionedBy User[] @relation("UserMentions")
  mentions    User[] @relation("UserMentions")

  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  description String
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments      Comment[]
  tags          PostTag[]
  notifications Notification[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  postId   String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  votes         Vote[]
  notifications Notification[]

  @@map("comments")
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?  @default("#3B82F6")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts PostTag[]

  @@map("tags")
}

model PostTag {
  id String @id @default(cuid())

  postId String
  tagId  String
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

model Vote {
  id        String   @id @default(cuid())
  value     Int // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  commentId String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("votes")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  message   String
  createdAt DateTime         @default(now())

  userId    String
  postId    String?
  commentId String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("notifications")
}